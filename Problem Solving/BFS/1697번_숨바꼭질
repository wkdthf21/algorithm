1697번 : 숨바꼭질
=============

### 문제
***
수빈이는 동생과 숨바꼭질을 하고 있다. 수빈이는 현재 점 N(0 ≤ N ≤ 100,000)에 있고, 동생은 점 K(0 ≤ K ≤ 100,000)에 있다. 수빈이는 걷거나 순간이동을 할 수 있다. 만약, 수빈이의 위치가 X일 때 걷는다면 1초 후에 X-1 또는 X+1로 이동하게 된다. 순간이동을 하는 경우에는 1초 후에 2*X의 위치로 이동하게 된다.

수빈이와 동생의 위치가 주어졌을 때, 수빈이가 동생을 찾을 수 있는 가장 빠른 시간이 몇 초 후인지 구하는 프로그램을 작성하시오.

<br>

### 입력
***

첫 번째 줄에 수빈이가 있는 위치 N과 동생이 있는 위치 K가 주어진다. N과 K는 정수이다.

<br>

### 출력
***

수빈이가 동생을 찾는 가장 빠른 시간을 출력한다.

<br>

### 풀이
***

1) 중복된 숫자를 검사할 때 map을 쓰면 메모리 초과로 실패하므로 visited 배열을 사용
2) 숫자 범위를 체크하자


```c++
#include <queue>
#include <iostream>

using namespace std;

int main(){

	int N, K;
	scanf("%d %d", &N, &K);

	int n1, n2, n3;

	queue<pair<int, int>> que;
	que.push({N, 0});

	int count = 0;
	bool visited[100001] = {false};
	while(!que.empty()){

		pair<int, int> curElement = que.front();
		int curNum = curElement.first;
		int count = curElement.second;
		que.pop();

		// 숫자 범위
		if(curNum < 0 || curNum > 100000) continue;

		// 동생을 찾음
		if(curNum == K){
			printf("%d", count);
			break;
		}

		if(visited[curNum]){
			continue;
		}

		visited[curNum] = true;

		++count;

		// not duplicate !
		que.push({curNum + 1, count});
		que.push({curNum - 1, count});
		que.push({curNum * 2, count});

	}


    return 0;
}

```
